/*!
 * Copyright (c) 2017 ~ present NAVER Corp.
 * billboard.js project is licensed under the MIT license
 * 
 * billboard.js, JavaScript chart library
 * https://naver.github.io/billboard.js/
 * 
 * @version 2.0.0-alpha
 * @requires billboard.js
 * @summary billboard.js plugin
 */
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("d3-selection"),require("d3-brush"),require("d3-voronoi"),require("d3-polygon")):"function"==typeof define&&define.amd?define("textoverlap",["d3-selection","d3-brush","d3-voronoi","d3-polygon"],t):"object"==typeof exports?exports.textoverlap=t(require("d3-selection"),require("d3-brush"),require("d3-voronoi"),require("d3-polygon")):(e.bb=e.bb||{},e.bb.plugin=e.bb.plugin||{},e.bb.plugin.textoverlap=t(e.d3,e.d3,e.d3,e.d3))}(this,(function(e,t,r,n){return function(e){var t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)r.d(n,i,function(t){return e[t]}.bind(null,i));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=17)}([,function(e,t,r){"use strict";function n(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}r.d(t,"a",(function(){return n}))},function(e,t,r){"use strict";function n(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}r.d(t,"a",(function(){return n}))},function(e,t,r){"use strict";function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}r.d(t,"a",(function(){return n}))},function(t,r){t.exports=e},function(e,t,r){"use strict";r.d(t,"a",(function(){return i}));var n=r(3),i=function(){function e(e){void 0===e&&(e={}),Object(n.a)(this,"$$",void 0),Object(n.a)(this,"options",void 0),this.options=e}var t=e.prototype;return t.$beforeInit=function(){},t.$init=function(){},t.$afterInit=function(){},t.$redraw=function(){},t.$willDestroy=function(){var e=this;Object.keys(this).forEach((function(t){e[t]=null,delete e[t]}))},e}();Object(n.a)(i,"version","2.0.0-alpha")},,,,function(e,t,r){"use strict";t.a={arc:"bb-arc",arcLabelLine:"bb-arc-label-line",arcs:"bb-arcs",area:"bb-area",areas:"bb-areas",axis:"bb-axis",axisX:"bb-axis-x",axisXLabel:"bb-axis-x-label",axisY:"bb-axis-y",axisY2:"bb-axis-y2",axisY2Label:"bb-axis-y2-label",axisYLabel:"bb-axis-y-label",bar:"bb-bar",bars:"bb-bars",brush:"bb-brush",button:"bb-button",buttonZoomReset:"bb-zoom-reset",chart:"bb-chart",chartArc:"bb-chart-arc",chartArcs:"bb-chart-arcs",chartArcsBackground:"bb-chart-arcs-background",chartArcsGaugeMax:"bb-chart-arcs-gauge-max",chartArcsGaugeMin:"bb-chart-arcs-gauge-min",chartArcsGaugeUnit:"bb-chart-arcs-gauge-unit",chartArcsTitle:"bb-chart-arcs-title",chartArcsGaugeTitle:"bb-chart-arcs-gauge-title",chartBar:"bb-chart-bar",chartBars:"bb-chart-bars",chartCircles:"bb-chart-circles",chartLine:"bb-chart-line",chartLines:"bb-chart-lines",chartRadar:"bb-chart-radar",chartRadars:"bb-chart-radars",chartText:"bb-chart-text",chartTexts:"bb-chart-texts",circle:"bb-circle",circles:"bb-circles",colorPattern:"bb-color-pattern",colorScale:"bb-colorscale",defocused:"bb-defocused",dragarea:"bb-dragarea",empty:"bb-empty",eventRect:"bb-event-rect",eventRects:"bb-event-rects",eventRectsMultiple:"bb-event-rects-multiple",eventRectsSingle:"bb-event-rects-single",focused:"bb-focused",gaugeValue:"bb-gauge-value",grid:"bb-grid",gridLines:"bb-grid-lines",legendBackground:"bb-legend-background",legendItem:"bb-legend-item",legendItemEvent:"bb-legend-item-event",legendItemFocused:"bb-legend-item-focused",legendItemHidden:"bb-legend-item-hidden",legendItemPoint:"bb-legend-item-point",legendItemTile:"bb-legend-item-tile",level:"bb-level",levels:"bb-levels",line:"bb-line",lines:"bb-lines",region:"bb-region",regions:"bb-regions",selectedCircle:"bb-selected-circle",selectedCircles:"bb-selected-circles",shape:"bb-shape",shapes:"bb-shapes",stanfordElements:"bb-stanford-elements",stanfordLine:"bb-stanford-line",stanfordLines:"bb-stanford-lines",stanfordRegion:"bb-stanford-region",stanfordRegions:"bb-stanford-regions",target:"bb-target",text:"bb-text",texts:"bb-texts",title:"bb-title",tooltip:"bb-tooltip",tooltipContainer:"bb-tooltip-container",tooltipName:"bb-tooltip-name",xgrid:"bb-xgrid",xgridFocus:"bb-xgrid-focus",xgridLine:"bb-xgrid-line",xgridLines:"bb-xgrid-lines",xgrids:"bb-xgrids",ygrid:"bb-ygrid",ygridFocus:"bb-ygrid-focus",ygridLine:"bb-ygrid-line",ygridLines:"bb-ygrid-lines",ygrids:"bb-ygrids",zoomBrush:"bb-zoom-brush",zoomRect:"bb-zoom-rect",EXPANDED:"_expanded_",SELECTED:"_selected_",INCLUDED:"_included_",TextOverlapping:"text-overlapping"}},function(e,t,r){"use strict";r.d(t,"a",(function(){return i}));var n=r(18);function i(e){var t,r,i,o=this.config,a=function(){var e=r.shift();return e&&t&&Object(n.e)(t)&&e in t?(t=t[e],a()):e?void 0:t};Object.keys(o).forEach((function(c){t=e,r=c.split("_"),i=a(),Object(n.b)(i)&&(o[c]=i)}))}},function(e,r){e.exports=t},,,function(e,t){e.exports=r},function(e,t){e.exports=n},,function(e,t,r){"use strict";r.r(t),r.d(t,"default",(function(){return d}));var n=r(1),i=r(2),o=r(3),a=r(14),c=r(15),b=r(4),s=r(10),u=r(5),l=function(){return{selector:".bb-texts text",extent:1,area:0}},d=function(e){function t(t){var r;return r=e.call(this,t)||this,Object(o.a)(Object(n.a)(r),"config",void 0),r.config=new l,Object(n.a)(r)||Object(n.a)(r)}Object(i.a)(t,e);var r=t.prototype;return r.$init=function(){s.a.call(this,this.options)},r.$redraw=function(){var e=Object(b.selectAll)(this.config.selector);e.empty()||this.preventLabelOverlap(e)},r.generateVoronoi=function(e){var t=this.$$.scale,r=["x","y"].map((function(e){return t[e].domain()})),n=r[0],i=r[1],o=[i[0],n[1]];return n[1]=o[0],i[0]=o[1],Object(a.voronoi)().extent([n,i]).polygons(e)},r.preventLabelOverlap=function(e){var t=this.config,r=t.extent,n=t.area,i=this.generateVoronoi(e.data().map((function(e){return[e.x,e.value]}))),o=0;e.each((function(){var e=i[o++];if(e&&this){var t=e.data,a=t[0],s=t[1],u=Object(c.polygonCentroid)(e),l=u[0],d=u[1],f=Math.round(Math.atan2(d-s,l-a)/Math.PI*2),g=r*(0===f?1:-1),p=-1===f?-r:r+5,h=1===Math.abs(f)?"middle":0===f?"start":"end";Object(b.select)(this).attr("display",Object(c.polygonArea)(e)<n?"none":null).attr("text-anchor",h).attr("dy","0."+(1===f?71:35)+"em").attr("transform","translate("+g+", "+p+")")}}))},t}(u.a)},function(e,t,r){"use strict";r.d(t,"a",(function(){return d})),r.d(t,"b",(function(){return s})),r.d(t,"c",(function(){return l})),r.d(t,"d",(function(){return a})),r.d(t,"e",(function(){return u})),r.d(t,"f",(function(){return c})),r.d(t,"g",(function(){return f}));r(4),r(11);var n,i=(n=function(e){return void 0!==e&&e})(self)||n(window)||n(global)||n(globalThis)||Function("return this")(),o=i&&i.document,a=(r(9),function(e){return"function"==typeof e}),c=function(e){return"string"==typeof e},b=function(e){return"number"==typeof e},s=function(e){return void 0!==e},u=function(e){return"object"==typeof e},l=function(e){return void 0===e||null===e||c(e)&&0===e.length||u(e)&&!(e instanceof Date)&&0===Object.keys(e).length||b(e)&&isNaN(e)};var d=function(e,t,r){void 0===r&&(r=1);for(var n=[],i=0|Math.max(0,Math.ceil((t-e)/r)),o=e;o<i;o++)n.push(e+o*r);return n};!function(){try{new MouseEvent("t")}catch(e){return function(e,t,r){void 0===r&&(r={bubbles:!1,cancelable:!1,screenX:0,screenY:0,clientX:0,clientY:0});var n=o.createEvent("MouseEvent");n.initMouseEvent(t,r.bubbles,r.cancelable,i,0,r.screenX,r.screenY,r.clientX,r.clientY,!1,!1,!1,!1,0,null),e.dispatchEvent(n)}}}();function f(e){var t;if(e instanceof Date)t=e;else if(c(e)){var r=this.config;t=this.format.dataTime(r.data_xFormat)(e)}else b(e)&&!isNaN(e)&&(t=new Date(+e));return(!t||isNaN(+t))&&console&&console.error&&console.error("Failed to parse x '"+e+"' to Date object"),t}}]).default}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,