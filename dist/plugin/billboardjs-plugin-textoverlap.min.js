/*!
 * Copyright (c) 2017 ~ present NAVER Corp.
 * billboard.js project is licensed under the MIT license
 * 
 * billboard.js, JavaScript chart library
 * https://naver.github.io/billboard.js/
 * 
 * @version 2.1.0-next.4-nightly-20200916153334
 * @requires billboard.js
 * @summary billboard.js plugin
 */
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("d3-selection"),require("d3-brush"),require("d3-voronoi"),require("d3-polygon")):"function"==typeof define&&define.amd?define("textoverlap",["d3-selection","d3-brush","d3-voronoi","d3-polygon"],t):"object"==typeof exports?exports.textoverlap=t(require("d3-selection"),require("d3-brush"),require("d3-voronoi"),require("d3-polygon")):(e.bb=e.bb||{},e.bb.plugin=e.bb.plugin||{},e.bb.plugin.textoverlap=t(e.d3,e.d3,e.d3,e.d3))}(this,(function(e,t,n,r){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=17)}([,function(e,t,n){"use strict";function r(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";function r(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}n.d(t,"a",(function(){return r}))},function(t,n){t.exports=e},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(3),i=function(){function e(e){void 0===e&&(e={}),Object(r.a)(this,"$$",void 0),Object(r.a)(this,"options",void 0),this.options=e}var t=e.prototype;return t.$beforeInit=function(){},t.$init=function(){},t.$afterInit=function(){},t.$redraw=function(){},t.$willDestroy=function(){var e=this;Object.keys(this).forEach((function(t){e[t]=null,delete e[t]}))},e}();Object(r.a)(i,"version","2.1.0-next.4-nightly-20200916153334")},,,,function(e,t,n){"use strict";t.a={arc:"bb-arc",arcLabelLine:"bb-arc-label-line",arcs:"bb-arcs",area:"bb-area",areas:"bb-areas",axis:"bb-axis",axisX:"bb-axis-x",axisXLabel:"bb-axis-x-label",axisY:"bb-axis-y",axisY2:"bb-axis-y2",axisY2Label:"bb-axis-y2-label",axisYLabel:"bb-axis-y-label",bar:"bb-bar",bars:"bb-bars",brush:"bb-brush",button:"bb-button",buttonZoomReset:"bb-zoom-reset",chart:"bb-chart",chartArc:"bb-chart-arc",chartArcs:"bb-chart-arcs",chartArcsBackground:"bb-chart-arcs-background",chartArcsGaugeMax:"bb-chart-arcs-gauge-max",chartArcsGaugeMin:"bb-chart-arcs-gauge-min",chartArcsGaugeUnit:"bb-chart-arcs-gauge-unit",chartArcsTitle:"bb-chart-arcs-title",chartArcsGaugeTitle:"bb-chart-arcs-gauge-title",chartBar:"bb-chart-bar",chartBars:"bb-chart-bars",chartCircles:"bb-chart-circles",chartLine:"bb-chart-line",chartLines:"bb-chart-lines",chartRadar:"bb-chart-radar",chartRadars:"bb-chart-radars",chartText:"bb-chart-text",chartTexts:"bb-chart-texts",circle:"bb-circle",circles:"bb-circles",colorPattern:"bb-color-pattern",colorScale:"bb-colorscale",defocused:"bb-defocused",dragarea:"bb-dragarea",empty:"bb-empty",eventRect:"bb-event-rect",eventRects:"bb-event-rects",eventRectsMultiple:"bb-event-rects-multiple",eventRectsSingle:"bb-event-rects-single",focused:"bb-focused",gaugeValue:"bb-gauge-value",grid:"bb-grid",gridLines:"bb-grid-lines",legend:"bb-legend",legendBackground:"bb-legend-background",legendItem:"bb-legend-item",legendItemEvent:"bb-legend-item-event",legendItemFocused:"bb-legend-item-focused",legendItemHidden:"bb-legend-item-hidden",legendItemPoint:"bb-legend-item-point",legendItemTile:"bb-legend-item-tile",level:"bb-level",levels:"bb-levels",line:"bb-line",lines:"bb-lines",main:"bb-main",region:"bb-region",regions:"bb-regions",selectedCircle:"bb-selected-circle",selectedCircles:"bb-selected-circles",shape:"bb-shape",shapes:"bb-shapes",stanfordElements:"bb-stanford-elements",stanfordLine:"bb-stanford-line",stanfordLines:"bb-stanford-lines",stanfordRegion:"bb-stanford-region",stanfordRegions:"bb-stanford-regions",subchart:"bb-subchart",target:"bb-target",text:"bb-text",texts:"bb-texts",title:"bb-title",tooltip:"bb-tooltip",tooltipContainer:"bb-tooltip-container",tooltipName:"bb-tooltip-name",xgrid:"bb-xgrid",xgridFocus:"bb-xgrid-focus",xgridLine:"bb-xgrid-line",xgridLines:"bb-xgrid-lines",xgrids:"bb-xgrids",ygrid:"bb-ygrid",ygridFocus:"bb-ygrid-focus",ygridLine:"bb-ygrid-line",ygridLines:"bb-ygrid-lines",ygrids:"bb-ygrids",zoomBrush:"bb-zoom-brush",EXPANDED:"_expanded_",SELECTED:"_selected_",INCLUDED:"_included_",TextOverlapping:"text-overlapping"}},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(18);function i(e){var t,n,i,o=this.config,a=function(){var e=n.shift();return e&&t&&Object(r.e)(t)&&e in t?(t=t[e],a()):e?void 0:t};Object.keys(o).forEach((function(b){t=e,n=b.split("_"),i=a(),Object(r.b)(i)&&(o[b]=i)}))}},function(e,n){e.exports=t},,,function(e,t){e.exports=n},function(e,t){e.exports=r},,function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return d}));var r=n(1),i=n(2),o=n(3),a=n(14),b=n(15),c=n(4),s=n(10),u=n(5),l=function(){return{selector:".bb-texts text",extent:1,area:0}},d=function(e){function t(t){var n;return n=e.call(this,t)||this,Object(o.a)(Object(r.a)(n),"config",void 0),n.config=new l,Object(r.a)(n)||Object(r.a)(n)}Object(i.a)(t,e);var n=t.prototype;return n.$init=function(){s.a.call(this,this.options)},n.$redraw=function(){var e=Object(c.selectAll)(this.config.selector);e.empty()||this.preventLabelOverlap(e)},n.generateVoronoi=function(e){var t=this.$$.scale,n=["x","y"].map((function(e){return t[e].domain()})),r=n[0],i=n[1],o=[i[0],r[1]];return r[1]=o[0],i[0]=o[1],Object(a.voronoi)().extent([r,i]).polygons(e)},n.preventLabelOverlap=function(e){var t=this.config,n=t.extent,r=t.area,i=this.generateVoronoi(e.data().map((function(e){return[e.x,e.value]}))),o=0;e.each((function(){var e=i[o++];if(e&&this){var t=e.data,a=t[0],s=t[1],u=Object(b.polygonCentroid)(e),l=u[0],d=u[1],f=Math.round(Math.atan2(d-s,l-a)/Math.PI*2),g=n*(0===f?1:-1),h=-1===f?-n:n+5,p=1===Math.abs(f)?"middle":0===f?"start":"end";Object(c.select)(this).attr("display",Object(b.polygonArea)(e)<r?"none":null).attr("text-anchor",p).attr("dy","0."+(1===f?71:35)+"em").attr("transform","translate("+g+", "+h+")")}}))},t}(u.a)},function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return s})),n.d(t,"c",(function(){return l})),n.d(t,"d",(function(){return a})),n.d(t,"e",(function(){return u})),n.d(t,"f",(function(){return b})),n.d(t,"g",(function(){return f}));n(3),n(4),n(11);var r,i=(r=function(e){return void 0!==e&&e})(self)||r(window)||r(global)||r(globalThis)||Function("return this")(),o=i&&i.document;n(9);var a=function(e){return"function"==typeof e},b=function(e){return"string"==typeof e},c=function(e){return"number"==typeof e},s=function(e){return void 0!==e},u=function(e){return"object"==typeof e},l=function(e){return void 0===e||null===e||b(e)&&0===e.length||u(e)&&!(e instanceof Date)&&0===Object.keys(e).length||c(e)&&isNaN(e)};var d=function(e,t,n){void 0===n&&(n=1);for(var r=[],i=0|Math.max(0,Math.ceil((t-e)/n)),o=e;o<i;o++)r.push(e+o*n);return r};!function(){try{new MouseEvent("t")}catch(e){return function(e,t,n){void 0===n&&(n={bubbles:!1,cancelable:!1,screenX:0,screenY:0,clientX:0,clientY:0});var r=o.createEvent("MouseEvent");r.initMouseEvent(t,n.bubbles,n.cancelable,i,0,n.screenX,n.screenY,n.clientX,n.clientY,!1,!1,!1,!1,0,null),e.dispatchEvent(r)}}}();function f(e){var t;if(e instanceof Date)t=e;else if(b(e)){var n=this.config;t=this.format.dataTime(n.data_xFormat)(e)}else c(e)&&!isNaN(e)&&(t=new Date(+e));return(!t||isNaN(+t))&&console&&console.error&&console.error("Failed to parse x '"+e+"' to Date object"),t}}]).default}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,