/*!
 * Copyright (c) 2017 ~ present NAVER Corp.
 * billboard.js project is licensed under the MIT license
 *
 * billboard.js, JavaScript chart library
 * https://naver.github.io/billboard.js/
 *
 * @version 2.1.4-nightly-20201209173600
 * @requires billboard.js
 * @summary billboard.js plugin
 */
!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e(require("d3-interpolate"),require("d3-color"),require("d3-scale"),require("d3-selection"),require("d3-brush"),require("d3-axis"),require("d3-format")):"function"==typeof define&&define.amd?define("bb",["d3-interpolate","d3-color","d3-scale","d3-selection","d3-brush","d3-axis","d3-format"],e):"object"==typeof exports?exports.bb=e(require("d3-interpolate"),require("d3-color"),require("d3-scale"),require("d3-selection"),require("d3-brush"),require("d3-axis"),require("d3-format")):(t.bb=t.bb||{},t.bb.plugin=t.bb.plugin||{},t.bb.plugin.stanford=e(t.d3,t.d3,t.d3,t.d3,t.d3,t.d3,t.d3))}(this,(function(t,e,n,o,r,i,a){return(()=>{"use strict";var s=[,t=>{t.exports=o},(t,e,n)=>{function o(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}n.d(e,{default:()=>D});var r=n(3),i=n(4),a=n(5);const s="bb-tooltip",c="bb-tooltip-name";n(1),n(6);var l=function(){var t=function(t){return"object"==typeof t&&null!==t&&t.Object===Object&&t},e=t(global);try{e||(e=t(globalThis)||t(self)||t(window))}catch(t){}return e||Function("return this")()}(),u=l&&l.document;var d=function(t){return"function"==typeof t},f=function(t){return"string"==typeof t},p=function(t){return"number"==typeof t},h=function(t){return void 0!==t},g=function(t){return"object"==typeof t},v=function(t){return void 0===t||null===t||f(t)&&0===t.length||g(t)&&!(t instanceof Date)&&0===Object.keys(t).length||p(t)&&isNaN(t)};!function(){try{new MouseEvent("t")}catch(t){return function(t,e,n){void 0===n&&(n={bubbles:!1,cancelable:!1,screenX:0,screenY:0,clientX:0,clientY:0});var o=u.createEvent("MouseEvent");o.initMouseEvent(e,n.bubbles,n.cancelable,l,0,n.screenX,n.screenY,n.clientX,n.clientY,!1,!1,!1,!1,0,null),t.dispatchEvent(o)}}}();function x(t){var e;if(t instanceof Date)e=t;else if(f(t)){var n=this.config;e=this.format.dataTime(n.data_xFormat)(t)}else p(t)&&!isNaN(t)&&(e=new Date(+t));return(!e||isNaN(+e))&&console&&console.error&&console.error("Failed to parse x '"+t+"' to Date object"),e}function y(t){var e,n,o,r=this.config,i=function(){var t=n.shift();return t&&e&&g(e)&&t in e?(e=e[t],i()):t?void 0:e};Object.keys(r).forEach((function(a){e=t,n=a.split("_"),o=i(),h(o)&&(r[a]=o)}))}var b=function(){function t(t){void 0===t&&(t={}),this.$$=void 0,this.options=void 0,this.options=t}var e=t.prototype;return e.$beforeInit=function(){},e.$init=function(){},e.$afterInit=function(){},e.$redraw=function(){},e.$willDestroy=function(){var t=this;Object.keys(this).forEach((function(e){t[e]=null,delete t[e]}))},t}();b.version="2.1.4";var m=function(){return{colors:void 0,epochs:[],lines:[],scale_min:void 0,scale_max:void 0,scale_width:20,scale_format:void 0,padding_top:0,padding_right:0,padding_bottom:0,padding_left:0,regions:[]}};const w="bb-colorscale",S="bb-stanford-elements",_="bb-stanford-line",$="bb-stanford-lines",E="bb-stanford-region",C="bb-stanford-regions";function M(t,e){return t.epochs<e.epochs?-1:t.epochs>e.epochs?1:0}function j(t){for(var e,n=function(t){for(var e,n,o=0,r=0,i=t.length,a=i-1;r<i;a=r,r++)e=t[r],n=t[a],o+=e.x*n.y,o-=e.y*n.x;return o/2}(t),o=0,r=0,i=0,a=t.length,s=a-1;i<a;s=i,i++){var c=t[i],l=t[s];e=c.x*l.y-l.x*c.y,o+=(c.x+l.x)*e,r+=(c.y+l.y)*e}return{x:o/(e=6*n),y:r/e}}var q=function(){function t(t){this.owner=void 0,this.owner=t;var e=t.$$.$el.main.select(".bb-chart").append("g").attr("class",S);e.append("g").attr("class",$),e.append("g").attr("class",C)}var e=t.prototype;return e.updateStanfordLines=function(t){var e=this.owner.$$,n=e.config,o=e.$el.main,r=n.axis_rotated,i=this.xvCustom.bind(e),a=this.yvCustom.bind(e),s=o.select("."+$).style("shape-rendering","geometricprecision").selectAll("."+_).data(this.owner.config.lines);s.exit().transition().duration(t).style("opacity","0").remove();var c=s.enter().append("g");c.append("line").style("opacity","0"),c.merge(s).attr("class",(function(t){return _+(t.class?" "+t.class:"")})).select("line").transition().duration(t).attr("x1",(function(t){return r?a(t,"y1"):i(t,"x1")})).attr("x2",(function(t){return r?a(t,"y2"):i(t,"x2")})).attr("y1",(function(t){return r?i(t,"x1"):a(t,"y1")})).attr("y2",(function(t){return r?i(t,"x2"):a(t,"y2")})).transition().style("opacity","1")},e.updateStanfordRegions=function(t){var e=this.owner.$$,n=e.config,o=e.$el.main,r=n.axis_rotated,i=this.xvCustom.bind(e),a=this.yvCustom.bind(e),s=this.owner.countEpochsInRegion.bind(e),c=o.select("."+C).selectAll("."+E).data(this.owner.config.regions);c.exit().transition().duration(t).style("opacity","0").remove();var l=c.enter().append("g");l.append("polygon").style("opacity","0"),l.append("text").attr("transform",r?"rotate(-90)":"").style("opacity","0"),(c=l.merge(c)).attr("class",(function(t){return E+(t.class?" "+t.class:"")})).select("polygon").transition().duration(t).attr("points",(function(t){return t.points.map((function(t){return[r?a(t,"y"):i(t,"x"),r?i(t,"x"):a(t,"y")].join(",")})).join(" ")})).transition().style("opacity",(function(t){return(t.opacity?t.opacity:.2)+""})),c.select("text").transition().duration(t).attr("x",(function(t){return r?a(j(t.points),"y"):i(j(t.points),"x")})).attr("y",(function(t){return r?i(j(t.points),"x"):a(j(t.points),"y")})).text((function(t){if(t.text){var e=s(t.points),n=e.value,o=e.percentage;return t.text(n,o)}return""})).attr("text-anchor","middle").attr("dominant-baseline","middle").transition().style("opacity","1")},e.updateStanfordElements=function(t){void 0===t&&(t=0),this.updateStanfordLines(t),this.updateStanfordRegions(t)},e.xvCustom=function(t,e){var n=this,o=n.axis,r=n.config,i=e?t[e]:n.getBaseValue(t);return o.isTimeSeries()?i=x.call(n,i):o.isCategorized()&&f(i)&&(i=r.axis_x_categories.indexOf(t.value)),Math.ceil(n.scale.x(i))},e.yvCustom=function(t,e){var n=this,o=t.axis&&"y2"===t.axis?n.scale.y2:n.scale.y,r=e?t[e]:n.getBaseValue(t);return Math.ceil(o(r))},t}(),N=n(7),O=n(8),F=function(){function t(t){this.owner=void 0,this.colorScale=void 0,this.owner=t}var e=t.prototype;return e.drawColorScale=function(){var t=this.owner,e=t.$$,n=t.config,o=e.data.targets[0],r=e.state.height-n.padding_bottom-n.padding_top,i=n.scale_width,s=function(t,e,n){void 0===n&&(n=1);for(var o=[],r=0|Math.max(0,Math.ceil((e-t)/n)),i=t;i<r;i++)o.push(t+i*n);return o}(n.padding_bottom,r,5),c=(0,a.scaleSequential)(o.colors).domain([s[s.length-1],s[0]]);this.colorScale&&this.colorScale.remove(),this.colorScale=e.$el.svg.append("g").attr("width",50).attr("height",r).attr("class",w),this.colorScale.append("g").attr("transform","translate(0, "+n.padding_top+")").selectAll("bars").data(s).enter().append("rect").attr("y",(function(t,e){return 5*e})).attr("x",0).attr("width",i).attr("height",5).attr("fill",(function(t){return c(t)}));var l=(0,a.scaleLog)().domain([o.minEpochs,o.maxEpochs]).range([s[0]+n.padding_top+s[s.length-1]+5-1,s[0]+n.padding_top]),u=(0,N.axisRight)(l),f=n.scale_format;"pow10"===f?u.tickValues([1,10,100,1e3,1e4,1e5,1e6,1e7]):d(f)?u.tickFormat(f):u.tickFormat((0,O.format)("d"));var p=this.colorScale.append("g").attr("class","legend axis").attr("transform","translate("+i+",0)").call(u);"pow10"===f&&p.selectAll(".tick text").text(null).filter((function(t){return t/Math.pow(10,Math.ceil(Math.log(t)/Math.LN10-1e-12))==1})).text(10).append("tspan").attr("dy","-.7em").text((function(t){return Math.round(Math.log(t)/Math.LN10)})),this.colorScale.attr("transform","translate("+(e.state.current.width-this.xForColorScale())+", 0)")},e.xForColorScale=function(){return this.owner.config.padding_right+this.colorScale.node().getBBox().width},e.getColorScalePadding=function(){return this.xForColorScale()+this.owner.config.padding_left+20},t}(),D=function(t){function e(e){var n;return(n=t.call(this,e)||this).config=void 0,n.colorScale=void 0,n.elements=void 0,n.config=new m,o(n)||o(n)}var n,l;l=t,(n=e).prototype=Object.create(l.prototype),n.prototype.constructor=n,n.__proto__=l;var u=e.prototype;return u.$beforeInit=function(){var t=this,e=this.$$;e.config.data_xSort=!1,e.isMultipleX=function(){return!0},e.showGridFocus=function(){},e.labelishData=function(t){return t.values},e.opacityForCircle=function(){return 1};var n=e.getCurrentPaddingRight.bind(e);e.getCurrentPaddingRight=function(){return n()+(t.colorScale?t.colorScale.getColorScalePadding():0)}},u.$init=function(){var t=this.$$;y.call(this,this.options),t.color=this.getStanfordPointColor.bind(t),this.colorScale=new F(this),this.elements=new q(this),this.convertData(),this.initStanfordData(),this.setStanfordTooltip(),this.colorScale.drawColorScale(),this.$redraw()},u.$redraw=function(t){this.colorScale&&this.colorScale.drawColorScale(),this.elements&&this.elements.updateStanfordElements(t)},u.getOptions=function(){return new m},u.convertData=function(){var t=this.$$.data.targets,e=this.options.epochs;t.forEach((function(t){t.values.forEach((function(t,n){t.epochs=e[n]})),t.minEpochs=void 0,t.maxEpochs=void 0,t.colors=void 0,t.colorscale=void 0}))},u.xvCustom=function(t,e){var n=this,o=n.axis,r=n.config,i=e?t[e]:n.getBaseValue(t);return o.isTimeSeries()?i=x.call(n,i):o.isCategorized()&&f(i)&&(i=r.axis_x_categories.indexOf(t.value)),Math.ceil(n.scale.x(i))},u.yvCustom=function(t,e){var n=this.scale,o=t.axis&&"y2"===t.axis?n.y2:n.y,r=e?t[e]:this.getBaseValue(t);return Math.ceil(o(r))},u.initStanfordData=function(){var t=this.config,e=this.$$.data.targets[0];e.values.sort(M);var n=e.values.map((function(t){return t.epochs}));e.minEpochs=isNaN(t.scale_min)?Math.min.apply(Math,n):t.scale_min,e.maxEpochs=isNaN(t.scale_max)?Math.max.apply(Math,n):t.scale_max,e.colors=d(t.colors)?t.colors:(0,r.interpolateHslLong)((0,i.hsl)(250,1,.5),(0,i.hsl)(0,1,.5)),e.colorscale=(0,a.scaleSequentialLog)(e.colors).domain([e.minEpochs,e.maxEpochs])},u.getStanfordPointColor=function(t){return this.data.targets[0].colorscale(t.epochs)},u.setStanfordTooltip=function(){var t=this.$$.config;v(t.tooltip_contents)&&(t.tooltip_contents=function(e,n,o,r){var i='<table class="'+s+'"><tbody>';return e.forEach((function(e){i+="<tr>\n\t\t\t\t\t\t\t<th>"+n(t.data_x)+'</th>\n\t\t\t\t\t\t\t<th class="value">'+o(e.x)+"</th>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<th>"+n(e.id)+'</th>\n\t\t\t\t\t\t\t<th class="value">'+o(e.value)+'</th>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t<tr class="'+c+"-"+e.id+'">\n\t\t\t\t\t\t\t<td class="name"><span style="background-color:'+r(e)+'"></span>'+n("Epochs")+'</td>\n\t\t\t\t\t\t\t<td class="value">'+o(e.epochs)+"</td>\n\t\t\t\t\t\t</tr>"})),i+"</tbody></table>"})},u.countEpochsInRegion=function(t){var e=this.data.targets[0],n=e.values.reduce((function(t,e){return t+ +e.epochs}),0),o=e.values.reduce((function(e,n){return function(t,e){for(var n=t.x,o=t.value,r=!1,i=0,a=e.length-1;i<e.length;a=i++){var s=e[i].x,c=e[i].y,l=e[a].x,u=e[a].y;c>o!=u>o&&n<(l-s)*(o-c)/(u-c)+s&&(r=!r)}return r}(n,t)?e+ +n.epochs:e}),0);return{value:o,percentage:0===o?0:+(o/n*100).toFixed(1)}},e}(b)},e=>{e.exports=t},t=>{t.exports=e},t=>{t.exports=n},t=>{t.exports=r},t=>{t.exports=i},t=>{t.exports=a}],c={};function l(t){if(c[t])return c[t].exports;var e=c[t]={exports:{}};return s[t](e,e.exports,l),e.exports}return l.d=(t,e)=>{for(var n in e)l.o(e,n)&&!l.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},l.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),l(2)})().default}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,