/*!
 * Copyright (c) 2017 ~ present NAVER Corp.
 * billboard.js project is licensed under the MIT license
 * 
 * billboard.js, JavaScript chart library
 * https://naver.github.io/billboard.js/
 * 
 * @version 2.0.0
 * @requires billboard.js
 * @summary billboard.js plugin
 */
!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e(require("d3-selection")):"function"==typeof define&&define.amd?define("bubblecompare",["d3-selection"],e):"object"==typeof exports?exports.bubblecompare=e(require("d3-selection")):(t.bb=t.bb||{},t.bb.plugin=t.bb.plugin||{},t.bb.plugin.bubblecompare=e(t.d3))}(this,(function(t){return function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";n.r(e),n.d(e,"default",(function(){return c}));var r=n(1),i=n(2),o=n(3),u=n(4),c=function(t){function e(e){var n;return n=t.call(this,e)||this,Object(o.a)(Object(r.a)(n),"$$",void 0),Object(r.a)(n)||Object(r.a)(n)}Object(i.a)(e,t);var n=e.prototype;return n.$init=function(){var t=this.$$;t.findClosest=this.findClosest.bind(this),t.getBubbleR=this.getBubbleR.bind(this),t.pointExpandedR=this.pointExpandedR.bind(this)},n.pointExpandedR=function(t){var n=this.getBubbleR(t),r=this.options.expandScale,i=void 0===r?1:r;return e.raiseFocusedBubbleLayer(t),this.changeCursorPoint(),n*i},e.raiseFocusedBubbleLayer=function(t){t.raise&&Object(u.select)(t.node().parentNode.parentNode).raise()},n.changeCursorPoint=function(){this.$$.$el.svg.select(".bb-event-rect").style("cursor","pointer")},n.findClosest=function(t,e){var n=this,r=this.$$;return t.filter((function(t){return t&&!r.isBarType(t.id)})).reduce((function(t,i){return r.dist(i,e)<n.getBubbleR(i)?i:t}),0)},n.getBubbleR=function(t){var e=this,n=this.options,r=n.minR,i=n.maxR,o=this.getZData(t);if(!o)return r;var u=this.$$.data.targets.reduce((function(t,n){var r=t[0],i=t[1],o=e.getZData(n.values[0]);return[Math.min(r,o),Math.max(i,o)]}),[1e4,0]),c=u[0],a=u[1],s=c>0&&a===c?0:o/a;return Math.abs(s)*(i-r)+r},n.getZData=function(t){return this.$$.isBubbleZType(t)?this.$$.getBubbleZData(t.value,"z"):t.value},e}(n(5).a);Object(o.a)(c,"version","0.0.1")},function(t,e,n){"use strict";function r(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}n.d(e,"a",(function(){return r}))},function(t,e,n){"use strict";function r(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}n.d(e,"a",(function(){return r}))},function(t,e,n){"use strict";function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}n.d(e,"a",(function(){return r}))},function(e,n){e.exports=t},function(t,e,n){"use strict";n.d(e,"a",(function(){return i}));var r=n(3),i=function(){function t(t){void 0===t&&(t={}),Object(r.a)(this,"$$",void 0),Object(r.a)(this,"options",void 0),this.options=t}var e=t.prototype;return e.$beforeInit=function(){},e.$init=function(){},e.$afterInit=function(){},e.$redraw=function(){},e.$willDestroy=function(){var t=this;Object.keys(this).forEach((function(e){t[e]=null,delete t[e]}))},t}();Object(r.a)(i,"version","2.0.0")}]).default}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,